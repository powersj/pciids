{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pciids Lookup vendor and device names using PCI IDs! CLI To search for devices using the CLI, pass in either: a) a pair of vendor and device PCI IDs b) two pairs, vendor and device PCI IDs as well as sub-vendor and sub-device PCI IDs: Here are some examples: $ pciids 1ed5 1ed5:0100 - Moore Threads Technology Co.,Ltd MTT S10 1ed5:0101 - Moore Threads Technology Co.,Ltd MTT S10 1ed5:0102 - Moore Threads Technology Co.,Ltd MTT S30 1ed5:0105 - Moore Threads Technology Co.,Ltd MTT S50 1ed5:0106 - Moore Threads Technology Co.,Ltd MTT S60 1ed5:0111 - Moore Threads Technology Co.,Ltd MTT S100 1ed5:0121 - Moore Threads Technology Co.,Ltd MTT S1000M 1ed5:0122 - Moore Threads Technology Co.,Ltd MTT S1000 1ed5:0123 - Moore Threads Technology Co.,Ltd MTT S2000 1ed5:01ff - Moore Threads Technology Co.,Ltd MTT HDMI/DP Audio 1ed5:0201 - Moore Threads Technology Co.,Ltd G2D30 1ed5:0202 - Moore Threads Technology Co.,Ltd G2D20 1ed5:0203 - Moore Threads Technology Co.,Ltd G2D10 1ed5:0211 - Moore Threads Technology Co.,Ltd G2D40 1ed5:0221 - Moore Threads Technology Co.,Ltd G2S80 1ed5:0222 - Moore Threads Technology Co.,Ltd G2S85 1ed5:0223 - Moore Threads Technology Co.,Ltd G2S4 1ed5:0251 - Moore Threads Technology Co.,Ltd G2N10 1ed5:02ff - Moore Threads Technology Co.,Ltd MTT HDMI/DP Audio $ pciids 1d0f efa1 1d0f:efa1 - Amazon.com, Inc. Elastic Fabric Adapter (EFA) $ pciids 10de 2206 10de 1467 10de:2206 10de:1467 - NVIDIA Corporation GA102 [GeForce RTX 3080] If there are multiple matches then all matches are returned. JSON output The command can take the --json flag to produce JSON output: $ pciids 121a 0009 121a 0009 --json [ { \"vendorID\" : \"121a\" , \"deviceID\" : \"0009\" , \"vendorName\" : \"3Dfx Interactive, Inc.\" , \"deviceName\" : \"Voodoo 4 / Voodoo 5\" , \"subVendorID\" : \"121a\" , \"subDeviceID\" : \"0009\" , \"subVendorName\" : \"3Dfx Interactive, Inc.\" , \"subDeviceName\" : \"Voodoo5 AGP 5500/6000\" } ] Debug output The --debug flag to produce additional output while running: $ pciids --json 121a 0009 121a 0009 DEBU looking up 121a:0009 121a:0009 DEBU downloading https://raw.githubusercontent.com/pciutils/pciids/master/pci.ids DEBU 200 OK DEBU parsing vendor IDs DEBU parsing PCI IDs DEBU found 1 results 121a:0009 121a:0009 - 3Dfx Interactive, Inc. Voodoo5 AGP 5500 /6000 Install Below outlines the various ways to obtain and install pciids. From binary Download the latest release of pciids for your platform and extract the tarball: wget pciids<version>_<os>_<arch>.tar.gz tar zxvf pciids<version>_<os>_<arch>.tar.gz The tarball will extract the readme, license, and the pre-compiled binary. From source To build and install directly from source run: git clone https://github.com/powersj/pciids cd pciids make The default make command will run go build and produce a binary in the root directory. From go To download using the go get command run: go get github.com/powersj/pciids The executable object file location will exist at ${GOPATH}/bin/pciids API usage Users can take advantage of various functions in their own code: All() : returns a list of all PCI ID devices LatestFile() : string of the latest PCI ID database Parse(string) : parses a given PCI ID database string QueryVendor(vendorID) : Searches for devices matching a vendor ID QueryDevice(vendorID, deviceID) : Searches for devices matching a PCI ID pair QuerySubDevice(vendorID, deviceID, subVendorID, subDeviceID) : Like QueryDevice, but matches two PCI ID pairs (e.g. device and sub-device) Additionally, the PCIID struct is available for use to create one-off IDs. Below is an example of querying for matching devices using a PCI ID pair: package main import ( \"fmt\" \"github.com/powersj/pciids\" ) func main () { ids , err := pciids . QueryDevice ( \"10de\" , \"1467\" ) if err != nil { fmt . Println ( \"Error getting device info: %v\" , err ) } for _ , id := range ids { fmt . Println ( id . String ()) } }","title":"Overview"},{"location":"#pciids","text":"Lookup vendor and device names using PCI IDs!","title":"pciids"},{"location":"#cli","text":"To search for devices using the CLI, pass in either: a) a pair of vendor and device PCI IDs b) two pairs, vendor and device PCI IDs as well as sub-vendor and sub-device PCI IDs: Here are some examples: $ pciids 1ed5 1ed5:0100 - Moore Threads Technology Co.,Ltd MTT S10 1ed5:0101 - Moore Threads Technology Co.,Ltd MTT S10 1ed5:0102 - Moore Threads Technology Co.,Ltd MTT S30 1ed5:0105 - Moore Threads Technology Co.,Ltd MTT S50 1ed5:0106 - Moore Threads Technology Co.,Ltd MTT S60 1ed5:0111 - Moore Threads Technology Co.,Ltd MTT S100 1ed5:0121 - Moore Threads Technology Co.,Ltd MTT S1000M 1ed5:0122 - Moore Threads Technology Co.,Ltd MTT S1000 1ed5:0123 - Moore Threads Technology Co.,Ltd MTT S2000 1ed5:01ff - Moore Threads Technology Co.,Ltd MTT HDMI/DP Audio 1ed5:0201 - Moore Threads Technology Co.,Ltd G2D30 1ed5:0202 - Moore Threads Technology Co.,Ltd G2D20 1ed5:0203 - Moore Threads Technology Co.,Ltd G2D10 1ed5:0211 - Moore Threads Technology Co.,Ltd G2D40 1ed5:0221 - Moore Threads Technology Co.,Ltd G2S80 1ed5:0222 - Moore Threads Technology Co.,Ltd G2S85 1ed5:0223 - Moore Threads Technology Co.,Ltd G2S4 1ed5:0251 - Moore Threads Technology Co.,Ltd G2N10 1ed5:02ff - Moore Threads Technology Co.,Ltd MTT HDMI/DP Audio $ pciids 1d0f efa1 1d0f:efa1 - Amazon.com, Inc. Elastic Fabric Adapter (EFA) $ pciids 10de 2206 10de 1467 10de:2206 10de:1467 - NVIDIA Corporation GA102 [GeForce RTX 3080] If there are multiple matches then all matches are returned.","title":"CLI"},{"location":"#json-output","text":"The command can take the --json flag to produce JSON output: $ pciids 121a 0009 121a 0009 --json [ { \"vendorID\" : \"121a\" , \"deviceID\" : \"0009\" , \"vendorName\" : \"3Dfx Interactive, Inc.\" , \"deviceName\" : \"Voodoo 4 / Voodoo 5\" , \"subVendorID\" : \"121a\" , \"subDeviceID\" : \"0009\" , \"subVendorName\" : \"3Dfx Interactive, Inc.\" , \"subDeviceName\" : \"Voodoo5 AGP 5500/6000\" } ]","title":"JSON output"},{"location":"#debug-output","text":"The --debug flag to produce additional output while running: $ pciids --json 121a 0009 121a 0009 DEBU looking up 121a:0009 121a:0009 DEBU downloading https://raw.githubusercontent.com/pciutils/pciids/master/pci.ids DEBU 200 OK DEBU parsing vendor IDs DEBU parsing PCI IDs DEBU found 1 results 121a:0009 121a:0009 - 3Dfx Interactive, Inc. Voodoo5 AGP 5500 /6000","title":"Debug output"},{"location":"#install","text":"Below outlines the various ways to obtain and install pciids.","title":"Install"},{"location":"#from-binary","text":"Download the latest release of pciids for your platform and extract the tarball: wget pciids<version>_<os>_<arch>.tar.gz tar zxvf pciids<version>_<os>_<arch>.tar.gz The tarball will extract the readme, license, and the pre-compiled binary.","title":"From binary"},{"location":"#from-source","text":"To build and install directly from source run: git clone https://github.com/powersj/pciids cd pciids make The default make command will run go build and produce a binary in the root directory.","title":"From source"},{"location":"#from-go","text":"To download using the go get command run: go get github.com/powersj/pciids The executable object file location will exist at ${GOPATH}/bin/pciids","title":"From go"},{"location":"#api-usage","text":"Users can take advantage of various functions in their own code: All() : returns a list of all PCI ID devices LatestFile() : string of the latest PCI ID database Parse(string) : parses a given PCI ID database string QueryVendor(vendorID) : Searches for devices matching a vendor ID QueryDevice(vendorID, deviceID) : Searches for devices matching a PCI ID pair QuerySubDevice(vendorID, deviceID, subVendorID, subDeviceID) : Like QueryDevice, but matches two PCI ID pairs (e.g. device and sub-device) Additionally, the PCIID struct is available for use to create one-off IDs. Below is an example of querying for matching devices using a PCI ID pair: package main import ( \"fmt\" \"github.com/powersj/pciids\" ) func main () { ids , err := pciids . QueryDevice ( \"10de\" , \"1467\" ) if err != nil { fmt . Println ( \"Error getting device info: %v\" , err ) } for _ , id := range ids { fmt . Println ( id . String ()) } }","title":"API usage"},{"location":"contributing/","text":"Contributing How to contribute I want your help. No really, I do. There might be a little voice inside that tells you you're not ready; that you need to do one more tutorial, or learn another framework, or write a few more blog posts before you can help me with this project. I assure you, that's not the case. This project has some clear Contribution Guidelines and expectations that you can read below. The contribution guidelines outline the process that you will need to follow to get a patch merged. By making expectations and process explicit, I hope it will make it easier for you to contribute. And you don't just have to write code. You can help out by writing documentation, tests, or even by giving feedback about this work. (And yes, that includes giving feedback about the contribution guidelines.) Thank you for contributing! (The above is from Adrienne Lowe ) Getting started Fork the repository on GitHub Read the index.md for getting started and look through the documentation for any other basic help. Play with the project on a variety of systems and environments, submit bugs, and submit pull requests! Developing a merge request Find an issue or create your own. Create a feature or bug fix branch in your fork of the repo. Write your feature or fix your bug. Make commits of logical units. If needed, update the documentation in either the README or docs folder. Ensure the project passes the lint tests, builds, and tests pass. Push and submit your pull request! Code changes The project has a basic CI setup already, which will run a lint, build, build the docs, and tests. These need to pass and I am more than willing to help you work through any issues you come across. This includes disabling or changing the config on the linters. These CI steps are very easy to run using the makefile via: make lint make build make docs make test Documentation changes If you are working on the documentation, ensure it continues to build using the steps outlined on the documentation page. Commit message This is the rough convention I follow for commit messages: topic: <short title for what changed> <BLANK LINE> <why this change was made and what changed> <BLANK LINE> Fixes #1 The first line is the subject and should not be longer than 70 characters, the second line is always blank, and other lines should be wrapped at 80 characters. Acceptance These things will make a PR more likely to be accepted: a well-described requirement tests for new code tests for old code! new code and tests follow the conventions in old code and tests a good commit message In general, I will merge a PR once I reviewed and approved it. Trivial changes (e.g., corrections to spelling) will get waved through. For substantial changes, you might get asked to resubmit the PR or divide the changes into more than one PR.","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#how-to-contribute","text":"I want your help. No really, I do. There might be a little voice inside that tells you you're not ready; that you need to do one more tutorial, or learn another framework, or write a few more blog posts before you can help me with this project. I assure you, that's not the case. This project has some clear Contribution Guidelines and expectations that you can read below. The contribution guidelines outline the process that you will need to follow to get a patch merged. By making expectations and process explicit, I hope it will make it easier for you to contribute. And you don't just have to write code. You can help out by writing documentation, tests, or even by giving feedback about this work. (And yes, that includes giving feedback about the contribution guidelines.) Thank you for contributing! (The above is from Adrienne Lowe )","title":"How to contribute"},{"location":"contributing/#getting-started","text":"Fork the repository on GitHub Read the index.md for getting started and look through the documentation for any other basic help. Play with the project on a variety of systems and environments, submit bugs, and submit pull requests!","title":"Getting started"},{"location":"contributing/#developing-a-merge-request","text":"Find an issue or create your own. Create a feature or bug fix branch in your fork of the repo. Write your feature or fix your bug. Make commits of logical units. If needed, update the documentation in either the README or docs folder. Ensure the project passes the lint tests, builds, and tests pass. Push and submit your pull request!","title":"Developing a merge request"},{"location":"contributing/#code-changes","text":"The project has a basic CI setup already, which will run a lint, build, build the docs, and tests. These need to pass and I am more than willing to help you work through any issues you come across. This includes disabling or changing the config on the linters. These CI steps are very easy to run using the makefile via: make lint make build make docs make test","title":"Code changes"},{"location":"contributing/#documentation-changes","text":"If you are working on the documentation, ensure it continues to build using the steps outlined on the documentation page.","title":"Documentation changes"},{"location":"contributing/#commit-message","text":"This is the rough convention I follow for commit messages: topic: <short title for what changed> <BLANK LINE> <why this change was made and what changed> <BLANK LINE> Fixes #1 The first line is the subject and should not be longer than 70 characters, the second line is always blank, and other lines should be wrapped at 80 characters.","title":"Commit message"},{"location":"contributing/#acceptance","text":"These things will make a PR more likely to be accepted: a well-described requirement tests for new code tests for old code! new code and tests follow the conventions in old code and tests a good commit message In general, I will merge a PR once I reviewed and approved it. Trivial changes (e.g., corrections to spelling) will get waved through. For substantial changes, you might get asked to resubmit the PR or divide the changes into more than one PR.","title":"Acceptance"},{"location":"documentation/","text":"Documentation The documentation is built with MkDocs and the Material for MkDocs theme and is written in Markdown. Building To build the documentation site, first setup a Python virtual environment and install the mkdocs-material package, which will pull in all other dependencies: virtualenv .venv . .venv/bin/activate pip install mkdocs-material To build the docs, use the makefile target: make docs Launch a web server to pull up the docs and then point a browser at http://0.0.0.0:8000/ to view the site: python3 -m http.server --directory site/","title":"Documentation"},{"location":"documentation/#documentation","text":"The documentation is built with MkDocs and the Material for MkDocs theme and is written in Markdown.","title":"Documentation"},{"location":"documentation/#building","text":"To build the documentation site, first setup a Python virtual environment and install the mkdocs-material package, which will pull in all other dependencies: virtualenv .venv . .venv/bin/activate pip install mkdocs-material To build the docs, use the makefile target: make docs Launch a web server to pull up the docs and then point a browser at http://0.0.0.0:8000/ to view the site: python3 -m http.server --directory site/","title":"Building"},{"location":"versioning/","text":"Versioning The project follows Sematic Versioning . Release a new version The current under-development release version is kept in app/pciids/cmd/root.go : const ( version = \"v1.0.0\" ) To release a new version create and push a new tag, then run the goreleaser: git tag -a v1.2.0 -m \"Summary of release\" git push origin v1.2.0 make release This will create the corresponding GitHub Releases page and upload the artifacts to it. Then increment the version in app/pciids/cmd/root.go and push that change to open the next version: git commit -am \"Open release v1.3.0\" git push","title":"Versioning"},{"location":"versioning/#versioning","text":"The project follows Sematic Versioning .","title":"Versioning"},{"location":"versioning/#release-a-new-version","text":"The current under-development release version is kept in app/pciids/cmd/root.go : const ( version = \"v1.0.0\" ) To release a new version create and push a new tag, then run the goreleaser: git tag -a v1.2.0 -m \"Summary of release\" git push origin v1.2.0 make release This will create the corresponding GitHub Releases page and upload the artifacts to it. Then increment the version in app/pciids/cmd/root.go and push that change to open the next version: git commit -am \"Open release v1.3.0\" git push","title":"Release a new version"}]}